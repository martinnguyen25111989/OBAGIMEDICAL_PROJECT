@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper

<div class="navbar-toolbar d-flex flex-shrink-0 align-items-center ms-xl-2">
    <ul class="d-flex mb-0">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        @if (Model.IsAuthenticated)
        {
            <li class="navbar-tool btn-group">
                            
                <a href="@Url.RouteUrl("CustomerInfo")" class="btn btn-light bg-transparent d-none d-lg-flex py-2">
                <div class="navbar-tool-icon-box">
                    <i class="navbar-tool-icon icon-person"></i>
                </div>
                <div class="navbar-tool-text text-left"><small>Hello!</small>@T("Account.MyAccount")</div>
                    @*@Model.CustomerName*@
                </a>
                <button type="button" class="btn btn-light bg-transparent dropdown-toggle dropdown-toggle-split" data-toggle="dropdown" aria-expanded="false">
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                    <a class="dropdown-item" href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a>
                    @*<a class="dropdown-item" href="#">Another action</a>
                    <a class="dropdown-item" href="#">Something else here</a>
                    <div class="dropdown-divider"></div>
                <a class="dropdown-item" href="#">Separated link</a>*@
                </div>

            </li>
        }
        else
        {
            var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                ? url.ToString()
                : webHelper.GetRawUrl(Context.Request);

            @if (Model.RegistrationType != UserRegistrationType.Disabled)
            {
                @*<li class="navbar-tool"><a href="@Url.RouteUrl("Register", new { returnUrl })" class="ico-register btn btn-light d-none d-lg-flex mr-lg-2">@T("Account.Register")</a></li>*@
            }
            <li class="navbar-tool"><a href="@Url.RouteUrl("Login", new { returnUrl })" class="ico-login navbar-tool-icon-box btn btn-light bg-transparent py-2" title="@T("Account.Login")"><i class="icon-person"></i></a></li>
        }
        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox navbar-tool-icon-box btn btn-light bg-transparent py-2">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li class="navbar-tool ml-2">
                <a href="@Url.RouteUrl("Wishlist")" class="ico-wishlist navbar-tool-icon-box btn btn-light bg-transparent py-2">
                   @*<span class="wishlist-label">@T("Wishlist")</span>*@
                    <span class="navbar-tool-icon icon-favorite"></span>
                    <span class="wishlist-qty cx_navbar-tool-label">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink" class="navbar-tool ml-2">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart navbar-tool-icon-box btn btn-light bg-transparent py-2">
                    @*<span class="cart-label">@T("ShoppingCart")</span>*@
                    <span class="navbar-tool-icon icon-shopping_bag"></span>
                    <span class="cart-qty cx_navbar-tool-label">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                </a>

            </li>
        }
        <li class="navbar-tool ml-2">
            <a href="#collapseSearch" class="navbar-tool-icon-box btn btn-light bg-transparent py-2" data-toggle="collapse" aria-expanded="false">
                <span class="icon-search"></span>
            </a>
        </li>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '#topcartlink', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#topcartlink', function () {
                    setTimeout(() => {
                        $('#flyout-cart').removeClass("active");
                    }, 5000)
                    //$('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    setTimeout(() => {
                        $('#flyout-cart').removeClass("active");
                    }, 5000)
                    //$('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
