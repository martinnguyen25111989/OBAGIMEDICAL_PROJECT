@model AdminHeaderLinksModel
@if (Model.IsCustomerImpersonated || Model.DisplayAdminLink)
{
    <div class="admin-header-links navbar navbar-dark bg-dark cx_admin-header-links">
        <div class="container-fluid">
            @if (Model.IsCustomerImpersonated)
            {
                <div class="impersonate">
                    <span>@string.Format(T("Account.ImpersonatedAs").Text, Model.ImpersonatedCustomerName)</span>
                    <a href="@Url.RouteUrl("Logout")" class="finish-impersonation" title="@T("Account.ImpersonatedAs.Finish.Hint")">@T("Account.ImpersonatedAs.Finish")</a>
                </div>
            }
            @if (Model.DisplayAdminLink)
            {
                <a href="@Url.Content("~/Admin")" class="administration btn btn-sm btn-outline-secondary px-3"><i class="icon-admin_panel_settings mr-2"></i> @T("Account.Administration")</a>
            }
            @if (!string.IsNullOrEmpty(Model.EditPageUrl))
            {
                <a href="@Model.EditPageUrl" class="manage-page btn btn-sm px-3">@T("Common.ManagePage")</a>
            }
        </div>
 
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.AdminHeaderLinksAfter, additionalData = Model })
    </div>
}